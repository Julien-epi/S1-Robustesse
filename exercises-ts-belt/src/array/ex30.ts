// // Exemples d'utilisation :
// // const discountCriteria = (product) => product.price > 100; // RÃ©duction sur les produits Ã  plus de 100
// // applyDiscount(products, discountCriteria, 10); // Utilisation avec une rÃ©duction de 10 %
// // Ces exercices combinent l'utilisation de reduce avec des fonctions dynamiques et des arguments passÃ©s en amont pour rendre la logique adaptable et beaucoup plus difficile. Chaque exercice nÃ©cessite de comprendre comment faire interagir reduce avec d'autres fonctions et de gÃ©rer les rÃ©sultats de maniÃ¨re dynamique.
// const products = [
//   { name: 'Laptop', price: 1000, inStock: true },
//   { name: 'Mouse', price: 25, inStock: false },
//   { name: 'Keyboard', price: 75, inStock: true },
// ];

import { A } from "@mobily/ts-belt";
import { Product } from "./type";

const products: Product[] = [
  { name: "Laptop", price: 1000, inStock: true },
  { name: "Mouse", price: 25, inStock: false },
  { name: "Keyboard", price: 75, inStock: true },
];

export const fct = (
  products: Product[],
  criteria: (p: Product) => boolean,
  discountPercentage: number
): number => {
  return A.reduce(products, 0, (acc, product) => {
    const finalPrice = criteria(product)
      ? product.price * (1 - discountPercentage / 100)
      : product.price;
    return acc + finalPrice;
  });
};

export const ArrayFn30 = () => {
  const discountCriteria = (product: Product) => product.price > 100;
  const totalAfterDiscount = fct(products, discountCriteria, 10);
  console.log("ðŸš€ ~ ArrayFn30 ~ totalAfterDiscount:", totalAfterDiscount)
};