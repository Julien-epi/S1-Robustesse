// // Exercice 4: GÃ©nÃ©rer un rapport en regroupant les produits selon des critÃ¨res dÃ©finis par l'utilisateurObjectif : Tu dois recevoir une fonction qui dÃ©finit comment regrouper les produits (par exemple, par nom, prix, ou catÃ©gorie). Le rapport doit inclure les produits regroupÃ©s avec une somme des quantitÃ©s par groupe.Utilise Array.reduce (pour grouper les produits en fonction de la fonction passÃ©e en argument et calculer la quantitÃ© totale pour chaque groupe).

import { A } from "@mobily/ts-belt";

interface Product {
  name: string;
  price: number;
  category: string;
  quantity: number;
}

interface GroupedProducts {
  products: Product[];
  totalQuantity: number;
}

const products: Product[] = [
  { name: "Laptop", price: 1000, category: "Electronics", quantity: 2 },
  { name: "Mouse", price: 25, category: "Accessories", quantity: 5 },
  { name: "Monitor", price: 200, category: "Electronics", quantity: 1 },
];

export const generateReport = (
  products: Product[],
  groupBy: (product: Product) => string
): Record<string, GroupedProducts> => {
  return A.reduce(
    products,
    {} as Record<string, GroupedProducts>,
    (acc, product) => {
      const groupKey = groupBy(product);

      if (!acc[groupKey]) {
        acc[groupKey] = { products: [], totalQuantity: 0 };
      }

      acc[groupKey].products.push(product);
      acc[groupKey].totalQuantity += product.quantity;

      return acc;
    }
  );
};

export const ArrayFn29 = () => {
  const groupByCategory = (product: Product) => product.category;
  const report = generateReport(products, groupByCategory);
  console.log("ðŸš€ ~ ArrayFn29 ~ report:", report)
};